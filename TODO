[+] Figure out launch schedule.
    [-] Solidify our position in taking care of the LCD before someone else does
    [+] Promotion
        [-] Anonymous posters
        [-] CLAP articles (then it's no longer anonymous...?)
    [-] When is the dance?
        [-] Are we hosting the dance, or can we hijack an already occuring deal?
    [-] When are matches sent out?
    [-] Are we doing staged matchings? (let unmatched people pick different preferences)
    [-] When to publicize site?
    [-] When to codefreeze?
    [-] Featurefreeze?

[+] Get crushes working
    [-] change all preferences references to crushes now.
    [-] clean input (lowercase, strip anything unneccessary)
    [-] check input against database. validate actual usernames
    [-] finish renaming preferences to crushes

[+] Crush Messages
    [-] Message: source(hashed), target, contents, date
    [-] Ability to respond? (responses would have to be in the form of non-hashed responder... or i guess if it was hashed and that person randomly started trying to talk to them they'd both see how they were both trying to conspire to get the other to pick them.  That'd be cute)
    [-] You recieved a secret message!
    [-] can send secret messages to crushes
    [-] Have on site message notification (inbox lights up)
    [-] viewing messages
    [-] posting messages
    [-] deleting unwanted messages
    
[-] Emails - Get it so that admin can send personal emails through the webapp's "in" inbox. -- or should we just use our gmail account??
[-] in invitation email, the username and pair code are not tabbed correctly
[-] fucking make it secure
[-] figure out how to dev-server.py --enable-sendmail for mail testing
[-] break admin functions into different pages.  admin page is expensive to the database

[+] Notifications
    [-] if one of your preferences opts out, you get notified
    [-] if a pref opts out, you unselect them, and then opts back in, notify original user
    [-] check on the day before -- if one of your prefs has not paired account/logged in/opted out, alert the user
    [-] alert user if that user does log in at a later time
    
[+] Plan out webapp structure

[+] Write documentation
    [-] How to build and host
    [-] Architecture layout
    [-] Make it so it is not carleton only specific -- generalize to other schools, etc

[+] Recently finished features for CONRAD's REIVEW - delete after reading
    [+] page organization (navigation, user account links)
        [+] merge pairing/opting out pages into one page and call it settings.
	[+] settings can be have a red background when you need to pair your account
    [-] Get webapp to receive emails (contact@lastchance2011.com)
    [-] when someone picks you, you get notified
    [-] invitations done -- except for a small formatting issue, which i left above (username and pair code are not tabbed correctly)
    [-] added email templates, so now we can template emails
    